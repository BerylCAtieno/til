# ‚úÖ React Learning Checklist


## üìå Phase 1: React Fundamentals

### 1Ô∏è‚É£ Introduction to React & Setup
- [ ] Understand **What is React**
- [ ] Understand **Declarative vs. Imperative Programming**
- [ ] Understand **Component-Based Architecture**
- [ ] Learn about the **Virtual DOM**
- [ ] Setup a React Project  
  - [ ] Use **Create React App (CRA)**
  - [ ] Understand project structure (`src`, `public`, `package.json`)
- [ ] Learn **Basic JSX**
  - [ ] What is JSX?
  - [ ] Embedding expressions in JSX `{}`  
  - [ ] JSX elements and attributes (`className` vs `class`)
  - [ ] Conditional rendering in JSX

### 2Ô∏è‚É£ Components
- [ ] Functional vs. Class Components *(focus on Functional)*
- [ ] Create Your First Component
- [ ] Render Components
- [ ] Understand Component Composition (nesting components)

### 3Ô∏è‚É£ State and Props
- [ ] Understand **Props**
  - [ ] Passing data from parent to child
  - [ ] Props are read-only
  - [ ] Prop drilling and its issues
- [ ] Understand **State**
  - [ ] What is state?
  - [ ] Use `useState` Hook
  - [ ] Update state (immutability)
  - [ ] Understand re-renders

### 4Ô∏è‚É£ Event Handling
- [ ] Handle User Events (`onClick`, `onChange`, `onSubmit`, etc.)
- [ ] Pass Event Handlers as Props
- [ ] Prevent Default Behavior

‚úÖ **Phase 1 Project Ideas:**  
- [ ] Build a simple counter  
- [ ] Create a static profile card  
- [ ] Build a basic to-do list (add/delete items)

---

## üìå Phase 2: React Hooks & Advanced Concepts

### 5Ô∏è‚É£ Essential Hooks
- [ ] `useEffect` Hook
  - [ ] Perform side effects (fetching, DOM, subscriptions)
  - [ ] Understand dependency arrays
  - [ ] Cleanup functions
- [ ] `useContext` Hook
  - [ ] Solve prop drilling with Context API
  - [ ] Create and consume Context
- [ ] `useRef` Hook
  - [ ] Access DOM elements directly
  - [ ] Persist values across renders without re-rendering

### 6Ô∏è‚É£ Conditional Rendering & Lists
- [ ] Conditional Rendering Techniques:
  - [ ] if/else statements
  - [ ] Ternary operator
  - [ ] Logical `&&` operator
- [ ] Rendering Lists:
  - [ ] Use `map()` to render arrays
  - [ ] Understand the `key` prop

### 7Ô∏è‚É£ Forms in React
- [ ] Controlled Components
  - [ ] Inputs controlled by state
  - [ ] Handle `onChange` for inputs
- [ ] Uncontrolled Components *(brief overview)*
- [ ] Form Submission: Handle `onSubmit`

‚úÖ **Phase 2 Project Ideas:**  
- [ ] Enhanced to-do list (edit, filter)
- [ ] Simple calculator

---

## üìå Phase 3: Routing, State Management & Performance

### 8Ô∏è‚É£ React Router (Client-Side Routing)
- [ ] Understand SPAs & Routing
- [ ] Install and set up React Router
- [ ] Use `BrowserRouter`, `Routes`, `Route`
- [ ] Use `Link` and `NavLink`
- [ ] Use URL Parameters & Nested Routes

### 9Ô∏è‚É£ Advanced State Management
- [ ] `useReducer` Hook
  - [ ] When to use `useReducer` over `useState`
- [ ] Intro to External State Management:
  - [ ] Zustand *(recommended lightweight option)*
  - [ ] Briefly learn about Redux/Redux Toolkit *(optional)*

### üîü Performance Optimization
- [ ] Use `React.memo`
- [ ] Use `useCallback`
- [ ] Use `useMemo`

‚úÖ **Phase 3 Project Ideas:**  
- [ ] Multi-page blog (fetch posts from mock API)
- [ ] Simple e-commerce product listing
- [ ] Weather app

---

## üìå Phase 4: Beyond the Basics & Ecosystem

### 1Ô∏è‚É£1Ô∏è‚É£ Styling in React
- [ ] CSS Modules
- [ ] Styled Components
- [ ] Tailwind CSS
- [ ] Inline Styles (when appropriate)

### 1Ô∏è‚É£2Ô∏è‚É£ Error Handling
- [ ] Use Error Boundaries

### 1Ô∏è‚É£3Ô∏è‚É£ Testing React Components *(Intro)*
- [ ] Why Test?
- [ ] Unit Testing with React Testing Library

### 1Ô∏è‚É£4Ô∏è‚É£ Fetching Data
- [ ] Use `fetch` or Axios
- [ ] Handle loading, error, success states
- [ ] Intro to React Query / SWR *(optional)*

‚úÖ **Phase 4 Project Ideas:**  
- [ ] Refactor a previous project:
  - [ ] Use state management library
  - [ ] Add robust error handling
  - [ ] Implement basic testing

---

## üóÇÔ∏è Recommended Resources
- [ ] Official React Docs
- [ ] MDN Web Docs (JavaScript)
- [ ] Online Courses (Udemy, Coursera, freeCodeCamp)
- [ ] YouTube Tutorials (Traversy Media, Net Ninja)
- [ ] Practice Platforms (LeetCode, HackerRank, CodeSandbox)

